class(g)
levels(g)
g[3]
g[3] <- c("c")
g
levels(g) <- factor(c("a","b","c"))
levels(g)
g
g[3] <- c("c")
g
g2 <- factor(c("a","b","b","a"), levels=c("a","b","c"))
g2[5] <- c("c")
g2
summary(g2)
3*1:3-1
3:3
1:3
3*c(1,2,3)
3*c(1,2,3)-1
name <- c("Ellie","Taylor","Luke","Drake")
class(name)
gender <- c("Female","Female","Male","Male")
class(gender)
age <- c(20,25,26,23)
class(age)
weight <- c(50,55,70,75)
?data.frame
friends <- data.frame(name,gender,age,weight, stringsAsFactors = F)
friends
friends$gender
friends$gender <- factor(friends$gender)
str(friends)
dim(friends)
class(friends)
summary(friends)
ncol(friends)
nrow(friends)
colnames(friends)
rownames(friends)
friends
friends$name
friends[,1]
friends[1,]
friends2 <- cbind(friends, data.frame(year=c(2,5,7,3)))
friends2
friends2[6] <- 1:4
friends2
colnames(friends2)
colnames(friends2)[6] <- "number"
colnames(friends2)
friends2[6]
class(colnames(friends))
friends1 <- data.frame(name,gender,age,weight, stringsAsFactors = T)
friends1
str(friends1)
summary(friends1)
length(friends2)
aggregate(Sepal.Length~Species, iris, summary)
aggregate(Sepal.Length~Species, iris, mean) # mean of Sepal.Length of every Species
library(ggplot2)
ggplot(iris, aes(x=Sepal.Length)) +
geom_histogram(bins=12, fill="white", colour="black")
ggplot(iris, aes(x=Sepal.Length)) +
geom_histogram(fill="white", colour="black", binwidth = 0.2) +
facet_grid(Species ~ .)
plot(density(iris$Sepal.Length))
ggplot(iris, aes(x=Sepal.Length)) +
geom_density(fill="blue", alpha=.2)
ggplot(iris, aes(x=Sepal.Length)) +
geom_line(stat="density") +
expand_limits(y=0)
ggplot(iris, aes(x=Sepal.Length, y=..density..))+
geom_histogram(fill="cornsilk", colour="grey60", binwidth=.25) +
geom_density() +
xlim(2,10)
table(iris$Species) # table(): frequency of categorical(factor) variable
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris[,1:4], 2, mean)
lapply(iris[,1:4], mean)
sapply(iris[,1:4], mean)
with(iris, plot(Sepal.Length, Sepal.Width, col=Species, pch=as.numeric(Species)))
plot(iris$Sepal.Length, iris$Sepal.Width, col=iris$Species, pch=as.numeric(iris$Species))
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, colour=Species))+
geom_point()
dev.off()
data(iris)
str(iris)
head(iris)
head(iris,10)
tail(iris)
tail(iris, 10)
View(iris)
summary(iris)
mytable <- table(iris$Species) # table()
mytable
str(mytable)
names(mytable)
df <- data.frame(mytable)
df
mytable[2][[1]]
mytable[[2]]
mytable[2][1]
mytable[2]
dim(iris)
nrow(iris)
ncol(iris)
irissample <- sample(1:nrow(iris),10) # nrow(): number of rows
irissample
iris[irissample,]
colnames(iris)    # names(iris)
iris[10:20,  "Sepal.Length"]
iris[10:20, 1]
iris$"Sepal.Length"[10:20]
iris$Sepal.Length[10:20]
?subset
setosa1 <- subset(iris, Species == "setosa")
head(setosa1)
summary(setosa1)
setosa2 <- iris[iris$Species == "setosa",]
setosa3 <- iris[which(iris$Species == "setosa"),]
which(iris$Species == "setosa")
iris2 <- subset(iris, Species == "setosa", select=-c(Sepal.Length, Species))
head(iris2)
iris2 <- subset(iris, Species == "setosa", select=c(Sepal.Length, Species))
head(iris2)
setosavirgnica <- iris[which(iris$Species %in% c("setosa","virginica") & iris$Sepal.Width > 3.5),]
str(setosavirgnica)
summary(setosavirgnica)
{
a <- 2
b <- 1:9
a * b
}
f <- function(x) x^2 + 1
f
x <- seq(-1, 1, 0.1)
x
y <- f(x)
plot(x,y, type ="l")
?plot
odd.oven <- function(x){
if(x %% 2 == 1) y <- "odd" else y <- "even"
y
}
odd.even(12)
odd.oven <- function(x){
if(x %% 2 == 1) y <- "odd" else y <- "even"
print(y)
}
odd.even(12)
odd.even <- function(x){
if(x %% 2 == 1) y <- "odd" else y <- "even"
print(y)
}
odd.even(12)
odd.even(9)
odd.even <- function(x){
if(x %% 2 == 1) y <- "odd" else y <- "even"
print(y)
}
odd.even(12)
odd.even(9)
x <- 75
if (x >= 90) "A"
if (x >= 90) "A" else "B"
if (x >= 90) "A" else if (x >= 80) "B" else "C"
x <- c(3, 6, 4, 7, 5, 6, 11, 4, 7, 9)
length(x)
x.srt <- sort(x)
x.srt
x.len <- length(x)
if (x.len %% 2 == 1) {
x.mode <- x.srt[(x.len + 1)/2]
} else {x.mode <- ((x.srt[x.len / 2] + x.srt[x.len/2 + 1]) / 2)
}
x.mode
(x.len + 1)/2
x.srt[(x.len + 1)/2]
x.len / 2
m <- function(x) {
if (x.len %% 2 == 1) {
x.mode <- x.srt[(x.len + 1)/2]
} else {x.mode <- ((x.srt[x.len / 2] + x.srt[x.len/2 + 1]) / 2)
}
x.mode
}
m(x)
median(x)
for (i in 10^(0:4)) print (sum(1:i))
10^(0:4)
10^(0:4)
for (i in 10^(0:4)) print (sum(1:i))
for (i in 10^(0:4)){
print(sum(1:i))
}
for (i in c(1, 3, 4)) {
print(i)
}
for (i in 1:3) {
for (j in 4:6) {
print(i*j)
}
}
x <- matrix(NA,3,3)
x
for (i in 1:3){
for (j in 1:3) {
x[i,j] <- i*j
}
}
x
x <- colors()  # colors(): chacracter vector of length 657
length(x)
for (i in 1:length(x)) {
if (i %% 100 == 0)
cat("x[", i, "]:", x[i], "\n", sep = "")  # "\n" for new line
}
x[100]
a <- 5
while(a > 0) {
print(a)
a <- a-1
}
i <- 1
while(i < 6){
print(i*2)
i <- i+1
}
for(i in 1:5){
print(i*2)
}
x <- colors()
i <- 1
while(i <= length(x)) {
if(x[i] == "orange") {
cat("x[", i, "]:", x[i], "\n", sep = "")
break
}
i <- i + 1
}
i <- 1
while(T){
print(i*2)
i <- i+1
if(i>5) break       # use if and break to avoid infinite loops
}
x <- 11:20; x
y <- 11:15
x;y
cat(x, y, sep = "-")
print(x,y)
cat("x=", x, sep = "")
cat("x=", x, sep = " ")
getwd()
setwd("/Users/Sodami/Documents/R programming/data")
getwd()
list.files()
cat("x=", x, "\n", sep = "", file = "cat.txt")
cat("y=", y, "\n", sep = "", file = "cat.txt")
cat("y=", y, "\n", sep = "", file = "cat.txt", append = T)
cat("y=", 1:15, sep = "", file = "cat.txt", append = T)
cat("y=", 1892, "\n", sep = "", file = "cat.txt", append = T)
cat("y=", 1, sep = "", file = "cat.txt", append = T)
data()
data(women)  # same as data("women")
data(women, package = "datasets")
head(women)
airquality_csv <- read.table("airquality.csv", header = T, sep = ",")
airquality_csv <- read.csv("airquality.csv")
airquality_csv
airquality_csv2 <- read.table("airquality.csv2", header = T, sep = ";", dec = ",") # ?????????
airquality_csv2 <- read.csv2("airquality.csv2")
airquality_csv2
?read.table
airquality_txt <- read.table("airquality.txt", header = T, sep = "\t")
airquality_txt <- read.table("airquality.txt", header = T, sep = "\t", na.strings = ".")  # if the missing value is stored as .
airquality_txt <- read.delim("airquality.txt")
airquality_txt
data(iris)
head(iris)
out.data <- iris[1:4]; out.data
write.table(out.data, "iris.txt", quote = F, sep = "\t",
row.names = F, col.names = T)
write.table(out.data, "/Users/Sodami/Documents/R programming/data/iris.csv", quote = T, sep = ",",
row.names = F, col.names = T)
x <- append(1:10, NA, after = 3)  # the new items will be inserted at the position given by after.
x
is.na(x)
which(is.na(x))
append(1:10, 0, after = 0)   # after = 0 means insert the new items at the head of the vector
comb <- stack(list(group1 = 1:2, group2 = 3:4))
list(group1 = 1:2, group2 = 3:4)
print(comb)
x <- append(1:10, NA, after = 3)  # the new items will be inserted at the position given by after.
x
is.na(x)
which(is.na(x))
append(1:10, 0, after = 0)   # after = 0 means insert the new items at the head of the vector
list(group1 = 1:2, group2 = 3:4)
comb <- stack(list(group1 = 1:2, group2 = 3:4))
print(comb)
dt.ori <- data.frame(x = 1:3, y = letters[1:3]); dt.ori
dt.tmp <- data.frame(x = 4:5, y = letters[4:5]); dt.tmp
dt <- rbind(dt.ori, dt.tmp)
dt
data("airquality")
head(airquality)
subset(airquality, Temp > 80, select = c(Ozone, Temp))
subset(airquality, Day == 1, select = - Temp)
subset(airquality, select = 1:3)
subset(airquality, select = Ozone:Wind)
df <- data.frame(x = c(NA, 2, 3), y = c(0, 10, NA)); df
df.clean <- na.omit(df)
df.clean
cumsum(df)   # cumsum fails if the input contains NA values
mean(df$x)
mean(df$x, na.rm = T)
dt.ori <- data.frame(x = 1:3, y = letters[1:3]); dt.ori
dt <- cbind(dt.ori, z = "a")
dt
dt <- cbind(dt.ori, i = 1:4)
dt <- cbind(dt.ori, i = 1:3)
dt
rbind(dt.ori, z = 0)                  # Check out for the recycling rule
rbind(dt.ori, data.frame(x = 0, y = letters[4]))
data(women)
search()    # Environment of current R workspace
head(women)
summary(women$height)
attach(women)  # for repetitive access, use attach to insert the data frame into your search list.
search()  # now you can refer to the data frame column by name without mentioning the data frame.
summary(height)                   # The same variable now available by name
detach()                           # remove the second location in the search list
search()
summary(height)
library(MASS)
str(Cars93) # Origin has two levels: USA and non-USA
?Cars93
group <- split(Cars93$MPG.city, Cars93$Origin) # split the MPG data according to origin
group
summary(group)
class(group)
median(group[[1]])
median(group[[2]])
class(group[1])
class(group[[1]])
group$USA[1]
group$USA
group[[1]][1]
group[1][1]    # list
group[1]       # list
class(group[1])
class(group[[1]])
group
class(group)
data(co2)
?co2
str(co2)
plot(co2)
?apply
means <- apply(matrix(co2, ncol = 12, byrow = T), 1, mean)  # 1: row
dim(matrix(co2, ncol = 12, byrow = T))
means
names(means) <- 1959:1997
length(1959:1997)
class(means)
plot(means)
data("warpbreaks")
head(warpbreaks)
tapply(warpbreaks$breaks, warpbreaks[-1], mean)
tapply(warpbreaks$breaks, warpbreaks[, 3, drop = FALSE], sum)  # tension ??????
tapply(warpbreaks$breaks, warpbreaks[, 3], sum)
head(iris)
by(iris, iris[5], summary)  # split data according to Species and call summary for the three groups
dev.off()
library(MASS)
?Cars93
str(Cars93) # Origin has two levels: USA and non-USA
group <- split(Cars93$MPG.city, Cars93$Origin) # split the MPG data according to origin
group
summary(group)
class(group)
median(group[[1]])
median(group[[2]])
class(group[1]) # list
class(group[[1]]) # integer
group$USA[1]
group$USA
group[[1]][1]
group[1]
group
class(group)
group[1]
group[2]
group$USA[1]
group[[1]][1]
median(group$USA)
data(co2)
str(co2)
plot(co2)
?apply
dim(matrix(co2, ncol = 12, byrow = T))
means <- apply(matrix(co2, ncol = 12, byrow = T), 1, mean)  # {1: row}, {2: column}
means   # 39 years
names(means) <- 1959:1997
length(1959:1997)
plot(means)
dev.off()
means <- apply(matrix(co2, ncol = 12, byrow = T), 2, mean)
names(means) <- 1:12
plot(means)
dev.off()
data(iris)
head(iris)
apply(iris[1:4], 2, mean)
sapply(iris[1:4], mean)    # sapply returns the results in a vector if possible.
lapply(iris[1:4], mean)    # lapply always returns the results in list.
apply(iris[1:4], 2, summary)
sapply(iris[1:4], summary)
lapply(iris[1:4], summary)
data("warpbreaks")
str(warpbreaks)
head(warpbreaks)
tapply(warpbreaks$breaks, warpbreaks[-1], mean)
head(iris)
by(iris, iris[5], summary)  # split data according to Species and call summary for the three groups
mapply(rep, 1:4, 4:1)
rep(1,4)
rep(2:3)
rep(2,3)
rep(3,2)
rep(4,1)
mapply(rep, 1:4, 4:1)
mapply(rep, times = 1:4, x = 4:1)
mapply(seq, from = 1, to = 1:10)
?nchar
nchar("Gerrard") # nchar returns a length of a string
msn <- c("Messi", "Suarez", "Neymar")
nchar(msn)
length("Gerrard")
length(msn) # length returns a length of a vector
paste(1:12)
paste("A", 1:6, sep = "")
msn <- c("Messi", "Suarez", "Neymar")
shirtnumber <- c(10, 9, 11)
paste(msn, shirtnumber, sep="-")
paste(msn, "loves", "Barcelona.")
paste(msn, "loves", "Barcelona", collapse = ", and ")  # collapse parameter defines top-level separator
substr("Statistics", 1, 4)
substr("Statistics", 7, 10)
bpl <- c("Arsenal", "Tottenham", "Chelsea")
substr(bpl, 1, 3)  # extract first 3 characters of each string
cities <- c("New York, NY", "Los Angeles, CA", "Peoria, IL")
substr(cities, nchar(cities) - 1, nchar(cities))
nchar(cities)
manager <- c("Mourinho is the normal one. Mourinho is the special one.")
sub("Mourinho", "Klopp", manager) # sub replaces the first instance of a substring
gsub("one", "manager", manager) # gsub replaces all instances of a substring
s <- as.Date("2016-01-01"); e <- as.Date("2016-02-01") # as.Date("yyyy-mm-dd") format
s
e
seq(from = s, to = e, by = 1)  # one month of dates
seq.Date(from = s, to = e, by = 1)
seq(from = s, by = 1, length.out = 7)  # Dates, one week apart
seq(from = s, by = "month", length.out = 6)  # First of the month for 6 months
seq(from = s, by = "3 months", length.out = 4) # Quarterly dates for one year
seq(from = s, by = "year", length.out = 10)  # Year-start dates for one decade
match("s", letters)
letters[19]
names(Cars93)
t(names(Cars93))
Cars93.sub <- subset(Cars93, select = c(1,2,5))
attach(Cars93.sub)
head(Cars93.sub)
summary(Cars93.sub$Price)
Price
length(Price)
order(Price)
order(Price, decreasing = T)
rev(order(Price))
sort(Price)
sort(Price, decreasing = T)
rev(sort(Price))
Cars93.srt <- Cars93.sub[order(Price), ]
head(Cars93.srt); tail(Cars93.srt)
?order
a <- c(1,3,2,5)
order(a)
sort(a)
rev(order(a))
sort(Price, decreasing = T)
library(MASS)
data("Cars93")
names(Cars93)
t(names(Cars93))
Cars93.sub <- subset(Cars93, select = c(1,2,5))
attach(Cars93.sub)
head(Cars93.sub)
summary(Cars93.sub$Price)
Price
length(Price)
order(Price)
order(Price, decreasing = T)
rev(order(Price))
sort(Price)
sort(Price, decreasing = T)
rev(sort(Price))
Cars93.srt <- Cars93.sub[order(Price), ]
head(Cars93.srt); tail(Cars93.srt)
Cars93.srt <- Cars93.sub[order(Manufacturer, -Price),]
head(Cars93.srt)
detach()
